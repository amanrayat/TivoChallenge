

/*
 * Representing data to users is an important aspect of any user
 * interface. As the presentation layer, the method used can either
 * make the undertanding of the data easy to communicate or can
 * impede the underlying meaning.
 *
 * TODO: Please present the code and the data generated by the
 * function in an easy and readable manner using tables & charts.
 * You can use any library you please, but link them into the code.
 *
 * NOTE: Please do not spend more than a few hours on this.
*/

Chart.defaults.global.legend.display = false;
var backgroundColor = []
var borderColor = [];
var metaData = [];
var myBarChart = null;
var myLineChart = null;
var IndiaChart = null;
var VictorChart =null;
var OscarChart = null;
var inactive = 0;
var month;
var year;


var backgroundColorArr = {
    'Robert': 'rgba(255, 99, 132, 0.2)',
    'Orange': 'rgba(54, 162, 235, 0.2)',
    'Volt': 'rgba(255, 206, 86, 0.2)',
    'Ink': 'rgba(75, 192, 192, 0.2)'
};
var borderColorArr = {
    'Robert': 'rgba(255,99,132,1)',
    'Orange': 'rgba(54, 162, 235, 1)',
    'Volt': 'rgba(255, 206, 86, 1)',
    'Ink': 'rgba(75, 192, 192, 1)'
};
var noBorderColor = 'rgb(255,255,255)';
var globaldata = generate();
function generate() {
    var data = [];
    var names = ['Robert','Orange','Volt','Ink'];
    for(var x = 0; x < (1234); x++) {
        var y = Math.floor(Math.random()*3);
        var z = new Date();
        Math.floor(Math.random() * 2 + 1) == 1 ? z.setDate(x + 1) : '';
        z.setDate(x + 1);
        data.push({
            date : z,
            name : names[ Math.floor(Math.random() * 4) ],
            active : ( (Math.floor(Math.random() * 2 + 1) == 1) ? true : false),
            length : y == 1 ? 60 : y == 2 ? 30 : 15,
            data : {
                tango : Math.random()*20,
                india : Math.random(),
                victor : (Math.random()*20).toFixed(2),
                oscar : Math.floor(Math.random() * (100000 - 5000)) + 5000
            }
        });
    }
    return data;
}

$('.date-picker').datepicker({
    changeMonth: true,
    changeYear: true,
    showButtonPanel: true,
    dateFormat: 'MM yy',
    onClose: function (dateText, inst) {
        function isDonePressed() {
            return ($('#ui-datepicker-div').html().indexOf('ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all ui-state-hover') > -1);
        }

        if (isDonePressed()) {
            $(this).datepicker('setDate', new Date(inst.selectedYear, inst.selectedMonth, 1));
            month = inst.selectedMonth + 1;
            year = inst.selectedYear;
            init(inst.selectedMonth + 1, inst.selectedYear);
        }

    }
});


// Get the data of the days and Length

function getData(month, year) {

    var arrLen = getMonthLabel(month, year);
    var results = Array(arrLen).fill(0);
    var index = 0;
    for (var d in globaldata) {
        var date = new Date(globaldata[d].date);
        if ((date.getMonth() + 1) == month && date.getFullYear() == year) {
            index = date.getDate() - 1;
            results[index] = globaldata[d].length;
            backgroundColor[index] = backgroundColorArr[globaldata[d].name];
            borderColor[index] = borderColorArr[globaldata[d].name];

            if((inactive)&(!globaldata[d].active)){
                borderColor[index] = noBorderColor;
                backgroundColor[index] = noBorderColor;
            }
            metaData[index] = globaldata[d].data;
        }

    }
    return results;
}

// Get the data of Tango
function getTango (month,year){
    var arrLen = getMonthLabel(month, year);
    var results = Array(arrLen).fill(0);
    var index = 0;
    for (var d in globaldata) {
        var date = new Date(globaldata[d].date);
        if ((date.getMonth() + 1) == month && date.getFullYear() == year){
            index = date.getDate() - 1;
            results[index] = globaldata[d].data.tango;
        }

    }
    return results;

}

// Get the data of India
function getIndia (month,year){
    var arrLen = getMonthLabel(month, year);
    var results = Array(arrLen).fill(0);
    var index = 0;
    for (var d in globaldata) {
        var date = new Date(globaldata[d].date);
        if ((date.getMonth() + 1) == month && date.getFullYear() == year){
            index = date.getDate() - 1;
            results[index] = globaldata[d].data.india;
        }

    }
    return results;

}

// Get the data of Victor
function getVictor (month,year){
    var arrLen = getMonthLabel(month, year);
    var results = Array(arrLen).fill(0);
    var index = 0;
    for (var d in globaldata) {
        var date = new Date(globaldata[d].date);
        if ((date.getMonth() + 1) == month && date.getFullYear() == year){
            index = date.getDate() - 1;
            results[index] = globaldata[d].data.victor;
        }

    }
    return results;

}

// Get the data of Oscar
function getOscar (month,year){
    var arrLen = getMonthLabel(month, year);
    var results = Array(arrLen).fill(0);
    var index = 0;
    for (var d in globaldata) {
        var date = new Date(globaldata[d].date);
        if ((date.getMonth() + 1) == month && date.getFullYear() == year){
            index = date.getDate() - 1;
            results[index] = globaldata[d].data.oscar;
        }

    }
    return results;

}

// Listener for the Active button click
$("#Active").click(function(){
    inactive = 1;
    init(month,year);

})
// Listener for all button click
$("#all").click(function(){
    inactive = 0;
    init(month,year);

})
// Function for getting all the months
function getMonthLabel(month, year) {
    return new Date(year, month, 0).getDate();
}


// The init function which calls the charts to be generated
function init(selectedMonth, selectedYear) {
    var dataLength = globaldata.length;

    var ctx = document.getElementById('myChart');
    var data = {
        labels: Array.apply(null, Array(getMonthLabel(selectedMonth, selectedYear))).map(function (_, i) {
            return i + 1;
        }),
        datasets: [
            {
                label: "Length",
                backgroundColor: backgroundColor,
                borderColor: borderColor,
                borderWidth: 1,
                data: getData(selectedMonth, selectedYear)

            }
        ]
    };
    var options = {
        title: {
            display: true,
            text: 'Bar Chart'
        },
        scales: {
            xAxes: [{
                stacked: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Days'
                }
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    fixedStepSize: 15,
                    max: 90

                },
                scaleLabel: {
                    display: true,
                    labelString: 'Length'
                }
            }]
        },
        responsive: false
    };

    // if there is already a chart present destroy that and create a new one with new data
    if (myBarChart != null) {
        myBarChart.destroy();
    }

    myBarChart = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: options

    });

// Chart for Tango

    var tangoChart = (document.getElementById("line-chart-tango"));

        var data2 = {
            labels: Array.apply(null, Array(getMonthLabel(selectedMonth, selectedYear))).map(function (_, i) {
                return i + 1;
            }),
            datasets: [
                {
                    label: "Values",
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    borderWidth: 1,
                    data: getTango(selectedMonth, selectedYear),
                    fill: false

                }
            ]
        };
        var options2 = {
            title: {
                display: true,
                text: 'Tango Chart'
            },
            scales: {
                xAxes: [{
                    stacked: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Days'
                    }
                }],
                yAxes: [{
                    stacked: true,
                    ticks: {
                        min: 0,
                        fixedStepSize: 2,
                        max: 20

                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Value'
                    }
                }]
            },
            responsive: false

        };

        // Destroy the chart if it is available

    if (myLineChart != null) {
        myLineChart.destroy();
    }

     myLineChart = new Chart(tangoChart, {
        type: 'line',
        data: data2,
        options: options2

    });

    // Chart for India

    var indiaChart = (document.getElementById("line-chart-india"));

    var data3 = {
        labels: Array.apply(null, Array(getMonthLabel(selectedMonth, selectedYear))).map(function (_, i) {
            return i + 1;
        }),
        datasets: [
            {
                label: "Values",
                borderColor: borderColor,
                borderWidth: 1,
                data: getIndia(selectedMonth, selectedYear),
                fill: false

            }
        ]
    };
    var options3 = {
        title: {
            display: true,
            text: 'India Chart'
        },
        scales: {
            xAxes: [{
                stacked: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Days'
                }
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    fixedStepSize: 0.1,
                    max: 1

                },
                scaleLabel: {
                    display: true,
                    labelString: 'Value'
                }
            }]
        },
        responsive: false
    };

    if (IndiaChart != null) {
        IndiaChart.destroy();
    }

    IndiaChart = new Chart(indiaChart, {
        type: 'line',
        data: data3,
        options: options3

    });

    // Chart for Victor

    var victorChart = (document.getElementById("line-chart-victor"));

    var data4 = {
        labels: Array.apply(null, Array(getMonthLabel(selectedMonth, selectedYear))).map(function (_, i) {
            return i + 1;
        }),
        datasets: [
            {
                label: "Values",
                borderColor: borderColor,
                borderWidth: 1,
                data: getVictor(selectedMonth, selectedYear),
                fill: false

            }
        ]
    };
    var options4 = {
        title: {
            display: true,
            text: 'Victor Chart'
        },
        scales: {
            xAxes: [{
                stacked: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Days'
                }
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 0,
                    fixedStepSize: 2,
                    max: 20

                },
                scaleLabel: {
                    display: true,
                    labelString: 'Value'
                }
            }]
        },
        responsive: false
    };

    // Destroy the chart if it is available

    if (VictorChart != null) {
        VictorChart.destroy();
    }

    VictorChart = new Chart(victorChart, {
        type: 'line',
        data: data4,
        options: options4

    });

    // Chart for Oscar

    var oscarTable = (document.getElementById("line-chart-oscar"));

    var data5 = {
        labels: Array.apply(null, Array(getMonthLabel(selectedMonth, selectedYear))).map(function (_, i) {
            return i + 1;
        }),
        datasets: [
            {
                label: "Values",
                borderColor: borderColor,
                borderWidth: 1,
                data: getOscar(selectedMonth, selectedYear),
                fill: false

            }
        ]
    };
    var options5 = {
        title: {
            display: true,
            text: 'Oscar Chart'
        },
        scales: {
            xAxes: [{
                stacked: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Days'
                }
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    min: 5000,
                    fixedStepSize: 10000,
                    max: 100000

                },
                scaleLabel: {
                    display: true,
                    labelString: 'Value'
                }
            }]
        },
        responsive: false
    };

    // Destroy the chart if it is available
    if (OscarChart != null) {
        OscarChart.destroy();
    }

    OscarChart = new Chart(oscarTable, {
        type: 'line',
        data: data5,
        options: options5

    });

}


